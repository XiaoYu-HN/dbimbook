[oracle@oracle-19c-vagrant chap10]$ ssb @memop_fast_ingest.sql

SQL*Plus: Release 19.0.0.0.0 - Production on Sun Jul 18 10:17:20 2021
Version 19.11.0.0.0

Copyright (c) 1982, 2020, Oracle.  All rights reserved.

Last Successful login time: Sun Jul 18 2021 10:14:27 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.11.0.0.0

SQL>
SQL> DROP TABLE iot_ingest PURGE;

Table dropped.

SQL>
SQL> CREATE TABLE iot_ingest (
  2      id     NUMBER PRIMARY KEY,
  3      value  CHAR(8)
  4  );

Table created.

SQL>
SQL> SET TIMING ON
SQL> BEGIN
  2      FOR i IN 1..1000000 LOOP
  3          INSERT INTO iot_ingest VALUES (
  4              i,
  5              'ABCDEFGH'
  6          );
  7
  8          COMMIT;
  9      END LOOP;
 10
 11      COMMIT;
 12  END;
 13  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:44.03
SQL> SET TIMING OFF
SQL>
SQL> DROP TABLE iot_ingest PURGE;

Table dropped.

SQL>
SQL> CREATE TABLE iot_ingest (
  2      id     NUMBER PRIMARY KEY,
  3      value  CHAR(8)
  4  );

Table created.

SQL>
SQL> SET TIMING ON
SQL> BEGIN
  2      FOR i IN 1..1000000 LOOP
  3          INSERT INTO iot_ingest VALUES (
  4              i,
  5              'ABCDEFGH'
  6          );
  7
  8          IF MOD(i, 5000) = 0 THEN
  9              COMMIT;
 10          END IF;
 11      END LOOP;
 12
 13      COMMIT;
 14  END;
 15  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:15.91
SQL> SET TIMING OFF
SQL>
SQL> DROP TABLE iot_ingest PURGE;

Table dropped.

SQL>
SQL> CREATE TABLE iot_ingest (
  2      id     NUMBER PRIMARY KEY,
  3      value  CHAR(8)
  4  )
  5  SEGMENT CREATION IMMEDIATE
  6  MEMOPTIMIZE FOR WRITE;

Table created.

SQL>
SQL> SET TIMING ON
SQL> BEGIN
  2      FOR i IN 1..1000000 LOOP
  3          INSERT /*+ MEMOPTIMIZE_WRITE */ INTO iot_ingest VALUES (
  4              i,
  5              'ABCDEFGH'
  6          );
  7
  8      END LOOP;
  9
 10  END;
 11  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:05.48
SQL> SET TIMING OFF
SQL>
SQL> SET NUMFORMAT 999,999,999,999
SQL> SELECT * FROM V$MEMOPTIMIZE_WRITE_AREA;

      TOTAL_SIZE       USED_SPACE       FREE_SPACE       NUM_WRITES      NUM_WRITERS           CON_ID
---------------- ---------------- ---------------- ---------------- ---------------- ----------------
     333,447,168        1,073,936      332,373,232                0               10                3

SQL> SELECT DBMS_MEMOPTIMIZE.GET_APPLY_HWM_SEQID FROM dual;

GET_APPLY_HWM_SEQID
-------------------
     67,511,099,682

SQL> SELECT DBMS_MEMOPTIMIZE.GET_WRITE_HWM_SEQID FROM dual;

GET_WRITE_HWM_SEQID
-------------------
     67,511,234,948

SQL>
SQL> EXEC dbms_memoptimize_admin.writes_flush;

PL/SQL procedure successfully completed.

SQL>
SQL> SELECT * FROM V$MEMOPTIMIZE_WRITE_AREA;

      TOTAL_SIZE       USED_SPACE       FREE_SPACE       NUM_WRITES      NUM_WRITERS           CON_ID
---------------- ---------------- ---------------- ---------------- ---------------- ----------------
     333,447,168           25,440      333,421,728                0               10                3

SQL> SELECT DBMS_MEMOPTIMIZE.GET_APPLY_HWM_SEQID FROM dual;

GET_APPLY_HWM_SEQID
-------------------
     67,511,238,833

SQL> SELECT DBMS_MEMOPTIMIZE.GET_WRITE_HWM_SEQID FROM dual;

GET_WRITE_HWM_SEQID
-------------------
     67,511,234,948

SQL>
SQL> EXEC DBMS_MEMOPTIMIZE.WRITE_END;

PL/SQL procedure successfully completed.

SQL> SELECT DBMS_MEMOPTIMIZE.GET_APPLY_HWM_SEQID FROM dual;

GET_APPLY_HWM_SEQID
-------------------
     67,511,238,833

SQL> SELECT DBMS_MEMOPTIMIZE.GET_WRITE_HWM_SEQID FROM dual;

GET_WRITE_HWM_SEQID
-------------------
     67,511,234,948

